searchState.loadedDescShard("endure", 0, "endure is a DHCP diagnostics tool.\n<code>analyzer</code> is a module containing the packet analysis and …\n<code>auditor</code> is a module containing implementations of the …\ncli is a module defining and handling the command line …\n<code>dispatcher</code> is a module serving as a core of the endure …\n<code>pcap_processor</code> is a module coordinating processing of the …\n<code>proto</code> is a module holding the packets parsing logic for …\n<code>sse</code> is a module implementing a Server Sent Events …\nA central instance receiving the captured packets and …\nInstalls DHCPv4 packet auditors for the specified …\nInstalls DHCPv4 packet auditors for the specified …\nInstalls generic packet auditors for the specified …\nInstalls auditors generic packet auditors for the specified\nRuns analysis of the received packet asynchronously.\nAudits a DHCPv4 packet.\nRuns generic auditors for the received packet.\nInstantiates the <code>Analyzer</code> for live capture.\nInstantiates the <code>Analyzer</code> for live capture.\nInstantiates the <code>Analyzer</code> for capture file.\nInstantiates the <code>Analyzer</code> for capture file.\nCollects and returns the current metrics from all generic …\nCollects and returns the current metrics from all generic …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns current metrics in an HTTP response.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRuns analysis of the received packet.\nRuns analysis of the received packet.\n<code>common</code> module contains common declarations for different …\n<code>conversation</code> is a module implementing auditors maintaining …\n<code>metric</code> module contains common declarations related to …\n<code>opcode</code> is a module implementing auditors maintaining …\n<code>packet_time</code> is a module implementing an auditor tracking …\n<code>retransmission</code> is a module implementing auditors …\n<code>roundtrip</code> is a module implementing auditors maintaining …\n<code>spectrum</code> is a module implementing auditors maintaining …\n<code>util</code> is a module containing tools for calculating metrics.\nCapture and analysis profiles.\nA trait implemented by the auditors checking if they …\nAn error returned upon an attempt to read from the packet.\nA trait that must be implemented by each DHCPv4 auditor.\nA trait that combines <code>DHCPv4PacketAuditor</code> and …\nA DHCPv4 transaction maintained by the …\nA trait that must be implemented by the transactional …\nA trait that combines <code>DHCPv4TransactionAuditor</code> and …\nContainer exposing an index for searching stored DHCPv4 …\nRepresents errors returned by the functions storing …\nIndicates the type of the transaction.\nA DHCPDISCOVER/DHCPOFFER exchange.\nA 4-way exchange in which the server responded with …\nA renewal when the server responded with DHCPNAK.\nA 4-way exchange.\nA trait that must be implemented by auditors running …\nA trait that combines <code>GenericPacketAuditor</code> and …\nA DHCPINFORM exchange case when the server has not yet …\nEnable all auditors, capture traffic from interface and …\nAn error returned upon an attempt to insert a packet into …\nAn error returned upon an attempt to insert a packet into …\nAn error returned upon an attempt to lock the packet for …\nEnable all auditors, analyze a capture file and compute …\nEnable all auditors, analyze a capture file with moving …\nA DHCPRELEASE message sent by the client.\nA renewal when client sends DHCPREQUEST without earlier …\nA lockable pointer to the <code>DHCPv4TransactionCache</code>.\nA 4-way exchange in which the server responded with …\nA DHCPINFORM/DHCPACK exchange.\nA renewal when the server responded with DHCPACK.\nAn undetermined exchange kind.\nAn error returned when trying to save a packet in the …\nA DHCPACK message sent by the server.\nRuns an audit on the received packet.\nRuns an audit on the received packet.\nRuns an audit on the transaction.\nA timestamp when the transaction instance was created.\nA DHCPDISCOVER message sent by the client.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiates the <code>DHCPv4Transaction</code> and inserts first …\nRemoves all transactions older than the specified number …\nChecks if the auditor should be run for the specified …\nA DHCPINFORM message sent by the client.\nInserts a packet into the transaction.\nFinds an existing transaction and inserts a packet into …\nConditionally sets a DHCPv4 packet instance of a given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the transaction kind based on the received packets.\nA DHCPNAK message sent by the server.\nInstantiates new <code>DHCPv4Transaction</code>.\nInstantiates new <code>DHCPv4TransactionCache</code>.\nA DHCPOFFER message sent by the server.\nA DHCPRELEASE message sent by the client.\nA DHCPREQUEST message sent by the client.\nConverts <code>DHCPv4TransactionCache</code> to …\nError details.\nDHCPv4 message type to which the error pertains.\nMessage type code.\nAn auditor maintaining the statistics of the unicast, …\nAn auditor maintaining the total statistics of the …\nInstantiates the auditor and initializes its metrics.\nInstantiates the auditor and initializes its metrics.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiates the auditor.\nInstantiates the auditor.\nTotal number of broadcast messages.\nPercentage of broadcast messages.\nTotal number of relayed messages.\nPercentage of relayed messages.\nTotal number of unicast not-relayed messages.\nPercentage of unicast not-relayed messages.\nTotal number of <code>BootReply</code> messages.\nPercentage of the <code>BootReply</code> messages.\nTotal number of <code>BootRequest</code> messages.\nPercentage of the <code>BootRequest</code> messages.\nTotal number of invalid <code>BOOTP</code> message opcodes.\nPercentage of the invalid <code>BOOTP</code> message opcodes.\nHardware address of the longest retrying client.\nPercentage of the retransmissions.\nAverage value of the <code>secs</code> field.\nAverage time in milliseconds to complete a successful …\nAverage time in milliseconds to complete a successful …\nAverage time in milliseconds to complete a successful …\nTotal number of attempted DORA exchanges in all exchanges.\nPercentage of attempted DORA exchanges in all exchanges.\nTotal number of attempted Inform exchanges in all …\nPercentage of attempted Inform exchanges in all exchanges.\nTotal number of attempted Rebind exchanges in all …\nPercentage of attempted Rebind exchanges in all exchanges.\nTotal number of attempted Release messages in all …\nPercentage of attempted Release messages in all exchanges.\nTotal number of attempted Renew exchanges in all exchanges.\nPercentage of attempted Renew exchanges in all exchanges.\nTimestamp of the last analyzed packet.\nAn auditor maintaining the statistics of the <code>BOOTP</code> message …\nAn auditor maintaining the total statistics of the <code>BOOTP</code> …\nInstantiates the auditor and initializes its metrics.\nInstantiates the auditor and initializes its metrics.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiates the auditor.\nInstantiates the auditor.\nAn auditor tracking timestamp of the last analyzed packet.\nInstantiates the auditor and initializes its metrics.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInstantiates the auditor.\nAn auditor maintaining the statistics of DHCP …\nAn auditor maintaining the statistics of DHCP …\nInstantiates the auditor and initializes its metrics.\nInstantiates the auditor and initializes its metrics.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiates the auditor.\nInstantiates the auditor.\nAn auditor maintaining the average time between different …\nAn auditor maintaining the average time between different …\nInstantiates the auditor and initializes its metrics.\nInstantiates the auditor and initializes its metrics.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiates the auditor.\nInstantiates the auditor.\nAn auditor counting different kinds of DHCPv4 transactions.\nAn auditor counting different kinds of DHCPv4 transactions.\nInstantiates the auditor and initializes its metrics.\nInstantiates the auditor and initializes its metrics.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiates the auditor.\nInstantiates the auditor.\nAn interface to the <code>RoundedSMA</code> and <code>RoundedSTA</code>.\nA trait for constructing the <code>RoundedSMA</code> or <code>RoundedSTA</code> …\nA single record held in the <code>MovingRanks</code> container.\nTracks and holds the highest metrics associated with …\nSimple moving average for calculating percentages of …\nAn interface to the <code>TotalCounter</code> and <code>PercentSMA</code> to increase\nRing buffer holding metrics samples.\nA moving average implementation with an arbitrary …\nA total average implementation with an arbitrary precision.\nCollection of related counters with calculable percentages …\nAdds new sample to the average.\nAdds a sample.\nAdds a sample.\nCompares the score with the existing ranks and optionally …\nScore age.\nReturns an average with a selected precision.\nReturn the moving average of the selected metric.\nReturns an average with a selected precision.\nReturns an average with a selected precision.\nReturns the current value for a selected counter.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>RoundedSMA</code> or <code>RoundedSTA</code> implementation from the …\nReturns a specified rank by index.\nA rank identifier.\nIncreases a selected metric by <code>1</code>.\nIncreases a selected counter by <code>1</code>.\nIncreases a selected metric by <code>1</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the samples.\nReturns the number of samples in the buffer.\nInstantiates a ring buffer of a given size.\nInstantiates a new rank with an age of 0.\nInstantiates the <code>MovingRanks</code>.\nInstantiates the counters.\nInstantiates the <code>PercentSMA</code>.\nInstantiates the <code>RoundedSMA</code>.\nInstantiates the <code>RoundedSMA</code>.\nReturns the percentage of the selected metrics value among …\nReturns the percentage of the selected metrics value among …\nReturns the percentage of the selected metrics value among …\nAdds new sample to the buffer.\nStored ranks.\nA metric used for scoring.\nMaximum age of the ranks before they expire.\nA structure holding parsed program arguments.\nThis command runs a traffic capture and analysis on the …\nAn enum that defines the supported subcommands.\nThis command reads and analyzes a specified <code>pcap</code> file.\nA group of parameters pertaining to the reporting method …\nEnables the REST API on [http-address]/api endpoint.\nMetrics output in the CSV format.\nFile location where the metrics should be periodically …\nA parser checking if the path of the specified file exists.\nA parser checking if the specified path is a directory …\nA parser checking if the specified file exists.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInterface name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMetrics output in the JSON format.\nEnables listening on the loopback interface. It is an …\nEnables the metrics export to Prometheus via the […\nRuns the program for the specified arguments.\nEnables server sent events (SSE).\nAddress and port where the program opens an HTTP server …\nFile location where the metrics should be written. Use …\nSpecifies a location of the directory where pcap files are …\nSpecifies the interval at which the periodic metrics …\nSpecifies the maximum number of the most recent packets …\nSpecifies the maximum number of the most recent packets …\nEnable periodic metrics reports (can be only used with –…\nReturned when starting a traffic capture on an interface …\nLocation of the CSV metrics reports.\nReturned when opening a file writer for CSV reports fails.\nAn enum of errors returned by the <code>Dispatcher::dispatch</code>\nRuns the installed listeners until the stop signal occurs.\nCSV metrics are printed to a specified file.\nReturned when starting an HTTP server failed.\nWraps <code>Registry</code> instance and registers a custom collector.\nCSV metrics are printed to a console.\nAttempts to add a listener for a device.\nReturns wrapped <code>Analyzer</code> instance.\nAn HTTP handler for exposing the metrics via the REST API.\nShared lockable pointer to the audit configuration.\nStarts an HTTP server enabling an endpoint for Prometheus.\nLocation where the periodic CSV reports are written.\nDispatches all requests and events in the program.\nEnables the REST API.\nEnables generation of the periodic metrics report in CSV …\nEnables the Prometheus endpoint.\nEnables server sent events (SSE).\nEnables generation of the periodic metrics report over SSE.\nCommon event gateway instance receiving events.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHTTP server handler returning collected metrics as a HTTP …\nAddress and port where HTTP server is bound.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA pool of listeners capturing the traffic.\nAn HTTP handler for exposing the metrics to Prometheus.\nCreates a wrapper instance and registers an <code>Analyzer</code> as a …\nInstantiates the dispatcher.\nAn interval of the periodic metrics report.\nAn HTTP handler for exposing server sent events.\nError details.\nError details.\nError details.\nPath to the file.\nMetrics reported in the CSV format.\nMetrics are printed to a specified file.\nReturned when opening a report file writer fails.\nThe report is printed after processing the entire file.\nmetrics reported in the JSON format.\nLocation of the metrics reports.\n<code>PcapProcessor</code> reads the <code>pcap</code> file and outputs the results.\nAn enum of errors returned by the <code>PcapProcessor::run</code>\nReturns when <code>pcap</code> file reader fails.\nSupported metrics output format.\nCSV report type indicates if the reports are periodic or …\nMetrics are printed to a console.\nPeriodic reports are output.\nReturned when writing the report fails.\nShared lockable pointer to the audit configuration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiates the processor.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocation where metrics are written.\nReader instance to be used for parsing the <code>pcap</code> file.\nIndicates how metrics are reported (e.g., CSV).\nReads the capture file and sends the packets to the …\nReads the packets from the provided reader, sends to the …\nReads the packets from the provided reader, sends to the …\nError details.\nError details.\nError details.\nPath to the file.\nPath to the file.\n<code>bootp</code> is a module providing the BOOTP message parsing …\n<code>buffer</code> is a module that provides mechanics for …\n<code>dhcp</code> is a module providing DHCP message parsing …\nA reply returned by the server to the client.\nA request sent to the server.\n<code>chaddr</code> maximum length.\n<code>chaddr</code> position.\n<code>ciaddr</code> position.\nEthernet hardware type (1).\n<code>file</code> maximum length.\n<code>file</code> position.\n<code>giaddr</code> position.\nA structure representing a hardware address.\nEthernet hardware address length (MAC address length).\n<code>hlen</code> position.\n<code>hops</code> position.\n<code>htype</code> position.\nAn enum representing hardware types.\nAn invalid opcode value received in the parsed BOOTP …\n<code>opcode</code> position.\nAn enum representing the bootp message types.\nAll hardware types other than Ethernet.\nPartially parsed packet state.\nRaw packet state.\nA structure representing a received <code>bootp</code> packet.\n<code>secs</code> position.\n<code>siaddr</code> position.\n<code>sname</code> maximum length.\n<code>sname</code> position.\n<code>unused</code> field position. It is used to carry the <code>flags</code> in …\n<code>xid</code> position.\n<code>yiaddr</code> position.\nReturns packet buffer.\nReads and caches <code>chaddr</code>.\nReads and caches <code>ciaddr</code>.\nReturns the hardware address.\nUnparsed packet data.\nReads and caches <code>file</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts to this type from the <code>opcode</code> in the parsed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReads and caches <code>giaddr</code>.\nReads and caches <code>hlen</code>.\nReads and caches <code>hops</code>.\nReturns the hardware type.\nReads and caches <code>htype</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransitions the packet from the RawState to the …\nChecks if the hardware address is invalid.\nCreates a hardware address instance from a hardware type …\nCreates a new raw packet instance.\nReads and caches <code>opcode</code>.\nReads and caches <code>secs</code>.\nReads and caches <code>siaddr</code>.\nReads and caches <code>sname</code>.\nPacket state.\nReads and caches <code>unused</code> field.\nReads and caches <code>xid</code>.\nReads and caches <code>yiaddr</code>.\nRepresents errors returned by the functions processing the …\nWraps a number ensuring it is within a desired range.\nContains the error value\nContains the success value\nAn error returned upon an attempt to read from the buffer …\nAn error returned upon an attempt to read a string from …\nRepresents a buffer holding received data.\nAn unknown IO error during the buffer read.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the clamped number (the number in range).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiates the number with clamping.\nInstantiates a buffer from a data array.\nChecks if the original number was out of range and had to …\nAttempts to read an array of bytes from the buffer.\nAttempts to read an IPv4 address from the buffer.\nAttempts to read from a buffer into a string.\nAttempts to read a u16 number from the buffer.\nAttempts to read a u32 number from the buffer.\nAttempts to read a u8 number from the buffer.\nAttempts to read a vector of bytes from the buffer.\nThe total buffer length.\nThe read length.\nThe read length.\nThe read start offset in the buffer.\nThe read start offset in the buffer.\n<code>dhcp::v4</code> is a module providing DHCPv4 message parsing …\nDHCPACK message.\nDHCPACTIVELEASEQUERY message.\nAn error returned upon an attempt to read from the buffer …\nDHCPLEASEQUERY message.\nDHCPDECLINE message.\nDHCPDISCOVER message.\nA structure representing the flags field in DHCP packet.\nDHCPFORCERENEW message.\nDHCPINFORM message.\nDHCPLEASEACTIVE message.\nDHCPLEASEQUERY message.\nDHCPLEASEQUERYDONE message.\nDHCPLEASEQUERYSTATUS message.\nDHCPLEASEUNASSIGNED message.\nDHCPLEASEUNKNOWN message.\nMagic cookie position in the packet.\nDHCPACK message code.\nDHCPACTIVELEASEQUERY message code.\nDHCPBULKLEASEQUERY message code.\nDHCPDECLINE message code.\nDHCPDISCOVER message code.\nDHCPFORCERENEW message code.\nDHCPINFORM message code.\nDHCPLEASEACTIVE message code.\nDHCPLEASEQUERY message code.\nDHCPLEASEQUERYDONE message code.\nDHCPLEASEQUERYSTATUS message code.\nDHCPLEASEUNASSIGNED message code.\nDHCPLEASEUNKNOWN message code.\nDHCPNAK message code.\nDHCPOFFER message code.\nDHCPRELEASE message code.\nDHCPREQUEST message code.\nDHCPTLS message code.\nAn enum representing the DHCP message types.\nDHCPNAK message.\nDHCPv4 options position in the packet.\nClient Identifier option code.\nDHCP Message Type option code.\nEnd option code.\nPad option code.\nParameter Request List option code.\nServer Identifier option code.\nDHCPOFFER message.\nParsed option 61 (Client Identifier).\nParsed option 53 (DHCP Message Type).\nRepresents errors returned by the functions parsing DHCP …\nA shorthand type for the partially parsed packet.\nPartially parsed packet state.\nA shorthand type for the raw packet.\nRaw packet state.\nA structure representing an inbound DHCP option.\nA structure representing a received DHCP packet.\nDHCPRELEASE message.\nDHCPREQUEST message.\nA shareable and lockable instance of the …\nDHCPTLS message.\nAn error returned when parsed option is truncated.\nUnknown DHCP message type.\nConverts the packet to the BOOTP packet.\nReads and caches <code>chaddr</code>.\nReads and caches <code>ciaddr</code>.\nOption code.\nUnparsed packet data.\nUnparsed option data.\nReads and caches <code>file</code>.\nReads and caches flags field.\nRaw flags field value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReads and caches <code>giaddr</code>.\nReads and caches <code>hlen</code>.\nReads and caches <code>hops</code>.\nReads and caches <code>htype</code>.\nClient identifier.\nClient identifier type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransitions the packet from the <code>RawState</code> to the …\nTransitions the packet from the <code>RawState</code> to the …\nChecks if the broadcast flag (most significant bit) is set.\nDHCP message type.\nCreates new instance.\nCreates new option instance.\nCreates new option 53 instance.\nCreates new option 61 instance.\nCreates a new raw packet instance.\nReads and caches <code>opcode</code>.\nReads and caches a DHCP option from the packet.\nReturns parsed option 53 (DHCP Message Type).\nReturns parsed option 54 (Server Identifier).\nReturns parsed option 61 (Client Identifier).\nReads a DHCP option from the packet and transforms the …\nReads and caches <code>secs</code>.\nReads and caches <code>siaddr</code>.\nReads and caches <code>sname</code>.\nPacket state.\nPacket state.\nPacket state.\nAttempts to read DHCP option from buffer at specified …\nReads and caches <code>xid</code>.\nReads and caches <code>yiaddr</code>.\nReceived option data length.\nError details.\nOption code.\nEvent serializing and sending errors.\nEvent that can be send over the <code>EventGateway</code>.\nCollects the events in the program and passes them to the …\nSpecifies a type of an event.\nPeriodic metrics report has been generated.\nReturned serializing event data failed.\nStringifies the event.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConnects new client.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiates the <code>EventGateway</code>.\nInstantiates new event.\nSends an event to all subscribers.\nAdds payload to the event.")